<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>servername = obj_menu.name+"'s Server";

// connection
port = 7966;
last_ip = "";
last_port = 0;
last_inst = undefined;
last_size = 0;

server = network_create_server(network_socket_udp,port,1);

// data
pack_in = 0;
pack_out = 0;
data_in = 0;
data_out = 0;
data_in_sec = 0;
data_out_sec = 0;

// client info
force_update_client = 0;
clients = 0;
next_client = 0;
client_ip_map = ds_map_create();
client_id_map = ds_map_create();
client_list = ds_list_create();

// entity info
force_update_entity = 0;
entities = 0;
next_entity = 0;
entity_list = ds_list_create();
entity_id_map = ds_map_create();

physics_world_create(1/16);
physics_world_gravity(0,50);
physics_world_update_speed(60);
physics_world_update_iterations(8);

// instance_create(0,0,obj_client);

alarm[0] = 12;

for(var i=16; i&lt;view_wview[0]; i+=32;)
    {
    var inst = instance_create(i,view_hview[0]-16,obj_ball);
    
    var temp_fix = physics_fixture_create();
    physics_fixture_set_box_shape(temp_fix,16,16);
    physics_fixture_set_density(temp_fix,0);
    inst.sprite_index = spr_wall;
    physics_fixture_bind(temp_fix,inst);
    physics_fixture_delete(temp_fix);
    
    var n_id = next_entity;
    ds_list_add(entity_list,inst);
    ds_map_add(entity_id_map,n_id,inst);
    inst.ent_id = n_id;
    inst.type = 0;
    next_entity++;
    entities++;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 12;

var client_count = ds_list_size(client_list);

// get entities ready for updating
force_update_entity++;
var active_count = 0;
var active_array = 0;
with(par_collider)
    {
    if (!(static) and other.force_update_entity == 14) or (phy_position_x != phy_position_xprevious) or (phy_position_y != phy_position_yprevious)
        {
        active = true;
        active_array[active_count] = id;
        active_count++;
        }
    else
        active = false;
    
    if (static) or !(active)
        image_blend = c_gray;
    else
        image_blend = c_white;
    }
if (force_update_entity == 14)
    force_update_entity = 0;

force_update_client++;
if (force_update_client == 4)
    force_update_client = 0;

// send correct positions of all clients for each client
for(var j=0; j&lt;client_count; j++;)
    {
    var send_inst = ds_list_find_value(client_list,j);
    if (send_inst == undefined)
        continue;
    
    var buff = server_queue_buffer(2048,1,send_inst.ip,send_inst.port);
    buffer_write(buff,buffer_u8,255);
    buffer_write(buff,buffer_s8,5);
    
    // write client update count
    buffer_write(buff,buffer_u8,client_count);
    // write entity update count
    buffer_write(buff,buffer_u16,active_count);
    
    if (force_update_client == 0)
        buffer_write(buff,buffer_u8,true);
    else
        buffer_write(buff,buffer_u8,false);
    
    // write client info
    for(var i=0; i&lt;client_count; i++;)
        {
        var recv_inst = ds_list_find_value(client_list,i);
        if (recv_inst == undefined)
            continue;
        
        buffer_write(buff,buffer_u8,recv_inst.usr_id);
        buffer_write(buff,buffer_f32,recv_inst.phy_position_x);
        buffer_write(buff,buffer_f32,recv_inst.phy_position_y);
        
        // extra info
        if (force_update_client == 0)
            {
            buffer_write(buff,buffer_s16,round(recv_inst.phy_speed_x*1000));
            buffer_write(buff,buffer_s16,round(recv_inst.phy_speed_y*1000));
            buffer_write(buff,buffer_s16,round(recv_inst.phy_linear_velocity_x*1000));
            buffer_write(buff,buffer_s16,round(recv_inst.phy_linear_velocity_y*1000));
            buffer_write(buff,buffer_s16,round(recv_inst.phy_rotation*10));
            buffer_write(buff,buffer_s16,round(recv_inst.phy_angular_velocity*10));
            }
        }
    
    // write entity info
    for(var i=0; i&lt;active_count; i++;)
        {
        phys_inst = active_array[i];
        
        buffer_write(buff,buffer_u16,phys_inst.ent_id);
        buffer_write(buff,buffer_f32,phys_inst.phy_position_x);
        buffer_write(buff,buffer_f32,phys_inst.phy_position_y);
        buffer_write(buff,buffer_s16,phys_inst.phy_speed_x*1000);
        buffer_write(buff,buffer_s16,phys_inst.phy_speed_y*1000);
        buffer_write(buff,buffer_s16,phys_inst.phy_linear_velocity_x*1000);
        buffer_write(buff,buffer_s16,phys_inst.phy_linear_velocity_y*1000);
        buffer_write(buff,buffer_s16,phys_inst.phy_rotation*10);
        buffer_write(buff,buffer_s16,phys_inst.phy_angular_velocity*10);
        }
    
    // timeout update
    send_inst.timeout -= 20;
    if (send_inst.timeout &lt; 1)
        server_disconnect_client(send_inst.usr_id);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// send out queued messages / update network statistics

if (clients &gt; 0)
    {
    with(obj_ghost)
        {
        data_timer1--;
        if (data_timer1 &lt;= 0)
            {
            data_total1 = 0;
            data_timer1 = 60;
            }
        data_timer2--;
        if (data_timer2 &lt;= 0)
            {
            data_total2 = 0;
            data_timer2 = 5;
            }
        
        var send = !(ds_priority_empty(buff_queue));
        while(send)
            {
            // grab next packets details
            var buff = ds_priority_find_max(buff_queue);
            var priority = ds_priority_find_priority(buff_queue,buff);
            last_priority = priority;
            
            // check if we arent overloading the client
            if (priority == 1) or ((priority &gt; data_total1 / data_max1) and (priority &gt; data_total2 / data_max2))
                {
                // send the packet and update the clients total data throughput
                network_send_udp(other.server,ip,port,buff,buffer_tell(buff));
                
                var size = buffer_tell(buff);
                data_total1 += size;
                data_total2 += size;
                other.data_out_sec += size;
                other.data_out += size;
                other.pack_out++;
                
                // remove buffer from queue and delete buffer
                ds_priority_delete_value(buff_queue,buff);
                buffer_delete(buff);
                }
            else send = false;
            
            // no more messages in queue
            if (ds_priority_empty(buff_queue))
                send = false;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord("R")))
    {
    network_destroy(server);
    
    game_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// server networking
if (ds_map_find_value(async_load,"id") != server)
    exit;

if (ds_map_find_value(async_load,"type") == network_type_data) // dealing with UDP data
    {
    net_ip = ds_map_find_value(async_load,"ip"); // last ip
    net_port = ds_map_find_value(async_load,"port"); // last port
    net_buff = ds_map_find_value(async_load,"buffer"); // buffer ID of payload data
    net_size = ds_map_find_value(async_load,"size"); // size of buffer in bytes
    
    var usr_id = buffer_read(net_buff,buffer_u8);
    var msg_id = buffer_read(net_buff,buffer_s8);
    
    // new client
    if (usr_id == 0) and (ds_map_find_value(client_ip_map,string(net_ip)+":"+string(net_port)) == undefined)
        {
        var net_inst = instance_create(0,0,obj_ghost);
        ds_map_add(client_ip_map,string(net_ip)+":"+string(net_port),net_inst);
        ds_map_add(client_id_map,next_client,net_inst);
        ds_list_add(client_list,net_inst);
        net_inst.ip = net_ip;
        net_inst.port = net_port;
        net_inst.usr_id = next_client;
        
        // tell new client to send stuff back
        var send_buff = server_queue_buffer(8,1,net_ip,net_port);
        buffer_write(send_buff,buffer_u8,255);
        buffer_write(send_buff,buffer_s8,0);
        buffer_write(send_buff,buffer_u8,next_client);
        
        net_inst.x = irandom(room_width);
        net_inst.y = irandom(room_height);;
        
        clients++;
        next_client++;
        }
    else
        {
        net_inst = ds_map_find_value(client_id_map,usr_id);
        if (net_inst != undefined)
            {
            data_in_sec += net_size;
            data_in += net_size;
            pack_in++;
            
            // handle payload
            switch(msg_id)
                {
                case 0: // tell client of previous players AND HIMSELF
                    
                    // set ghosts name
                    net_inst.name = buffer_read(net_buff,buffer_string);
                    
                    // tally up clients
                    var c_sending = 0;
                    var c_send_id;
                    for(var i=0; i&lt;ds_list_size(client_list); i++;)
                        {
                        var inst = ds_list_find_value(client_list,i);
                        if (inst == undefined)
                            continue;
                        
                        c_send_id[c_sending] = inst.id;
                        c_sending++;
                        }
                    
                    // tally up entities
                    var e_sending = 0;
                    var e_send_id;
                    for(var i=0; i&lt;ds_list_size(entity_list); i++;)
                        {
                        var inst = ds_list_find_value(entity_list,i);
                        if (inst == undefined)
                            continue;
                        
                        e_send_id[e_sending] = inst.id;
                        e_sending++;
                        }
                    
                    // begin message
                    var buff = server_queue_buffer(32 + c_sending*128 + e_sending*16,1,net_inst.ip,net_inst.port);
                    
                    buffer_write(buff,buffer_u8,255);
                    buffer_write(buff,buffer_s8,1);
                    
                    // send client info
                    buffer_write(buff,buffer_u8,c_sending);
                    for(var i=0; i&lt;c_sending; i++;)
                        {
                        var inst = c_send_id[i];
                        
                        buffer_write(buff,buffer_u8,inst.usr_id);
                        buffer_write(buff,buffer_string,inst.name);
                        }
                    
                    // send entity info
                    buffer_write(buff,buffer_u16,e_sending);
                    for(var i=0; i&lt;e_sending; i++;)
                        {
                        var inst = e_send_id[i];
                        
                        buffer_write(buff,buffer_u16,inst.ent_id);
                        buffer_write(buff,buffer_u8,inst.type);
                        buffer_write(buff,buffer_f32,inst.phy_position_x);
                        buffer_write(buff,buffer_f32,inst.phy_position_y);
                        }
                    
                    // tell other clients new player joined
                    for(var i=0; i&lt;c_sending; i++;)
                        {
                        var inst = c_send_id[i];
                        if (inst == net_inst)
                            continue;
                        
                        // send new client's info
                        var buff = server_queue_buffer(32,1,inst.ip,inst.port);
                        buffer_write(buff,buffer_u8,255);
                        buffer_write(buff,buffer_s8,2);
                        buffer_write(buff,buffer_u8,1);
                        buffer_write(buff,buffer_u8,net_inst.usr_id);
                        buffer_write(buff,buffer_string,net_inst.name);
                        }
                    break;
                
                case 1: // disconnect
                    server_disconnect_client(usr_id);
                    break;
                
                case 2: // keys
                    var keys_net = buffer_read(net_buff,buffer_u8);
                    
                    net_inst.key_north = (keys_net &amp; 1 == 1);
                    net_inst.key_west = (keys_net &amp; 2 == 2);
                    net_inst.key_south = (keys_net &amp; 4 == 4);
                    net_inst.key_east = (keys_net &amp; 8 == 8);
                    net_inst.key_face = (keys_net &amp; 16 == 16);
                    
                    var key;
                    // tell clients about key change
                    for(var i=0; i&lt;ds_list_size(client_list); i++;)
                        {
                        var send_inst = ds_list_find_value(client_list,i);
                        if (send_inst == undefined)
                            continue;
                        
                        var buff = server_queue_buffer(8,0.6,send_inst.ip,send_inst.port);
                        buffer_write(buff,buffer_u8,255);
                        buffer_write(buff,buffer_s8,4);
                        buffer_write(buff,buffer_u8,net_inst.usr_id);
                        buffer_write(buff,buffer_u8,keys_net);
                        }
                    break;
                
                case 3: // new physics objects
                    var type = buffer_read(net_buff,buffer_u8);
                    var xx = buffer_read(net_buff,buffer_s16);
                    var yy = buffer_read(net_buff,buffer_s16);
                    
                    var temp_fix = physics_fixture_create();
                    var inst = instance_create(xx*16,yy*16,obj_ball);
                    if (type == 0)
                        {
                        physics_fixture_set_box_shape(temp_fix,16,16);
                        physics_fixture_set_density(temp_fix,0);
                        inst.sprite_index = spr_wall;
                        }
                    else
                        {
                        physics_fixture_set_circle_shape(temp_fix,16);
                        physics_fixture_set_density(temp_fix,0.5);
                        inst.sprite_index = spr_ball;
                        inst.static = false;
                        }
                    physics_fixture_bind(temp_fix,inst);
                    physics_fixture_delete(temp_fix);
                    
                    var n_id = next_entity;
                    ds_list_add(entity_list,inst);
                    ds_map_add(entity_id_map,n_id,inst);
                    inst.ent_id = n_id;
                    inst.type = type;
                    next_entity++;
                    entities++;
                    
                    for(var i=0; i&lt;ds_list_size(client_list); i++;)
                        {
                        var send_inst = ds_list_find_value(client_list,i);
                        if (send_inst == undefined)
                            continue;
                        
                        // send the new physics instance with it's details
                        var buff = server_queue_buffer(16,0.6,send_inst.ip,send_inst.port);
                        buffer_write(buff,buffer_u8,255);
                        buffer_write(buff,buffer_s8,6);
                        buffer_write(buff,buffer_u16,n_id);
                        buffer_write(buff,buffer_u8,type);
                        buffer_write(buff,buffer_s16,xx);
                        buffer_write(buff,buffer_s16,yy);
                        }
                    break;
                
                case 127: // ping
                    if (buffer_read(net_buff,buffer_u8) == 0)
                        {
                        net_inst.pingold = get_timer(); // init ping measurement
                        
                        // reply accordingly
                        var buff = server_queue_buffer(8,0.8,net_inst.ip,net_inst.port);
                        buffer_write(buff,buffer_u8,255);
                        buffer_write(buff,buffer_s8,127);
                        buffer_write(buff,buffer_u8,0);
                        }
                    else
                        net_inst.ping = (get_timer()-net_inst.pingold)/1000; // measure ping
                    
                    // reset timeout
                    net_inst.timeout = room_speed * 7;
                    break;
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_text(12,12,"fps: "+string(fps_real)+"#data: "+string(data_in)+"B / "+string(data_out)+"B#packets: "+string(pack_in)+" / "+string(pack_out)+"#clients: "+string(clients)+"#ds size: [l]: "+string(ds_list_size(client_list))+"#[m_id]: "+string(ds_map_size(client_id_map))+"#[m_ip]: "+string(ds_map_size(client_ip_map)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
